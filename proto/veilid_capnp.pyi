"""This is an automatically generated stub for `veilid.capnp`."""
from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Iterator, Literal, Sequence, overload

class Key256:
    u0: int
    u1: int
    u2: int
    u3: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[Key256Reader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Key256Reader: ...
    @staticmethod
    def new_message() -> Key256Builder: ...
    def to_dict(self) -> dict: ...

class Key256Reader(Key256):
    def as_builder(self) -> Key256Builder: ...

class Key256Builder(Key256):
    @staticmethod
    def from_dict(dictionary: dict) -> Key256Builder: ...
    def copy(self) -> Key256Builder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> Key256Reader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Signature512:
    u0: int
    u1: int
    u2: int
    u3: int
    u4: int
    u5: int
    u6: int
    u7: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[Signature512Reader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Signature512Reader: ...
    @staticmethod
    def new_message() -> Signature512Builder: ...
    def to_dict(self) -> dict: ...

class Signature512Reader(Signature512):
    def as_builder(self) -> Signature512Builder: ...

class Signature512Builder(Signature512):
    @staticmethod
    def from_dict(dictionary: dict) -> Signature512Builder: ...
    def copy(self) -> Signature512Builder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> Signature512Reader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Nonce24:
    u0: int
    u1: int
    u2: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[Nonce24Reader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Nonce24Reader: ...
    @staticmethod
    def new_message() -> Nonce24Builder: ...
    def to_dict(self) -> dict: ...

class Nonce24Reader(Nonce24):
    def as_builder(self) -> Nonce24Builder: ...

class Nonce24Builder(Nonce24):
    @staticmethod
    def from_dict(dictionary: dict) -> Nonce24Builder: ...
    def copy(self) -> Nonce24Builder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> Nonce24Reader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class TypedKey:
    kind: int
    key: Key256 | Key256Builder | Key256Reader
    def init(self, name: Literal["key"]) -> Key256: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[TypedKeyReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> TypedKeyReader: ...
    @staticmethod
    def new_message() -> TypedKeyBuilder: ...
    def to_dict(self) -> dict: ...

class TypedKeyReader(TypedKey):
    key: Key256Reader
    def as_builder(self) -> TypedKeyBuilder: ...

class TypedKeyBuilder(TypedKey):
    key: Key256 | Key256Builder | Key256Reader
    @staticmethod
    def from_dict(dictionary: dict) -> TypedKeyBuilder: ...
    def copy(self) -> TypedKeyBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TypedKeyReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class TypedSignature:
    kind: int
    signature: Signature512 | Signature512Builder | Signature512Reader
    def init(self, name: Literal["signature"]) -> Signature512: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[TypedSignatureReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> TypedSignatureReader: ...
    @staticmethod
    def new_message() -> TypedSignatureBuilder: ...
    def to_dict(self) -> dict: ...

class TypedSignatureReader(TypedSignature):
    signature: Signature512Reader
    def as_builder(self) -> TypedSignatureBuilder: ...

class TypedSignatureBuilder(TypedSignature):
    signature: Signature512 | Signature512Builder | Signature512Reader
    @staticmethod
    def from_dict(dictionary: dict) -> TypedSignatureBuilder: ...
    def copy(self) -> TypedSignatureBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TypedSignatureReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class AddressIPV4:
    addr: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[AddressIPV4Reader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> AddressIPV4Reader: ...
    @staticmethod
    def new_message() -> AddressIPV4Builder: ...
    def to_dict(self) -> dict: ...

class AddressIPV4Reader(AddressIPV4):
    def as_builder(self) -> AddressIPV4Builder: ...

class AddressIPV4Builder(AddressIPV4):
    @staticmethod
    def from_dict(dictionary: dict) -> AddressIPV4Builder: ...
    def copy(self) -> AddressIPV4Builder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> AddressIPV4Reader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class AddressIPV6:
    addr0: int
    addr1: int
    addr2: int
    addr3: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[AddressIPV6Reader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> AddressIPV6Reader: ...
    @staticmethod
    def new_message() -> AddressIPV6Builder: ...
    def to_dict(self) -> dict: ...

class AddressIPV6Reader(AddressIPV6):
    def as_builder(self) -> AddressIPV6Builder: ...

class AddressIPV6Builder(AddressIPV6):
    @staticmethod
    def from_dict(dictionary: dict) -> AddressIPV6Builder: ...
    def copy(self) -> AddressIPV6Builder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> AddressIPV6Reader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Address:
    ipv4: AddressIPV4 | AddressIPV4Builder | AddressIPV4Reader
    ipv6: AddressIPV6 | AddressIPV6Builder | AddressIPV6Reader
    def which(self) -> Literal["ipv4", "ipv6"]: ...
    @overload
    def init(self, name: Literal["ipv4"]) -> AddressIPV4: ...
    @overload
    def init(self, name: Literal["ipv6"]) -> AddressIPV6: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[AddressReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> AddressReader: ...
    @staticmethod
    def new_message() -> AddressBuilder: ...
    def to_dict(self) -> dict: ...

class AddressReader(Address):
    ipv4: AddressIPV4Reader
    ipv6: AddressIPV6Reader
    def as_builder(self) -> AddressBuilder: ...

class AddressBuilder(Address):
    ipv4: AddressIPV4 | AddressIPV4Builder | AddressIPV4Reader
    ipv6: AddressIPV6 | AddressIPV6Builder | AddressIPV6Reader
    @staticmethod
    def from_dict(dictionary: dict) -> AddressBuilder: ...
    def copy(self) -> AddressBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> AddressReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SocketAddress:
    address: Address | AddressBuilder | AddressReader
    port: int
    def init(self, name: Literal["address"]) -> Address: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SocketAddressReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SocketAddressReader: ...
    @staticmethod
    def new_message() -> SocketAddressBuilder: ...
    def to_dict(self) -> dict: ...

class SocketAddressReader(SocketAddress):
    address: AddressReader
    def as_builder(self) -> SocketAddressBuilder: ...

class SocketAddressBuilder(SocketAddress):
    address: Address | AddressBuilder | AddressReader
    @staticmethod
    def from_dict(dictionary: dict) -> SocketAddressBuilder: ...
    def copy(self) -> SocketAddressBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SocketAddressReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

ProtocolKind = Literal["udp", "ws", "wss", "tcp"]

class DialInfoUDP:
    socketAddress: SocketAddress | SocketAddressBuilder | SocketAddressReader
    def init(self, name: Literal["socketAddress"]) -> SocketAddress: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DialInfoUDPReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DialInfoUDPReader: ...
    @staticmethod
    def new_message() -> DialInfoUDPBuilder: ...
    def to_dict(self) -> dict: ...

class DialInfoUDPReader(DialInfoUDP):
    socketAddress: SocketAddressReader
    def as_builder(self) -> DialInfoUDPBuilder: ...

class DialInfoUDPBuilder(DialInfoUDP):
    socketAddress: SocketAddress | SocketAddressBuilder | SocketAddressReader
    @staticmethod
    def from_dict(dictionary: dict) -> DialInfoUDPBuilder: ...
    def copy(self) -> DialInfoUDPBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DialInfoUDPReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class DialInfoTCP:
    socketAddress: SocketAddress | SocketAddressBuilder | SocketAddressReader
    def init(self, name: Literal["socketAddress"]) -> SocketAddress: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DialInfoTCPReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DialInfoTCPReader: ...
    @staticmethod
    def new_message() -> DialInfoTCPBuilder: ...
    def to_dict(self) -> dict: ...

class DialInfoTCPReader(DialInfoTCP):
    socketAddress: SocketAddressReader
    def as_builder(self) -> DialInfoTCPBuilder: ...

class DialInfoTCPBuilder(DialInfoTCP):
    socketAddress: SocketAddress | SocketAddressBuilder | SocketAddressReader
    @staticmethod
    def from_dict(dictionary: dict) -> DialInfoTCPBuilder: ...
    def copy(self) -> DialInfoTCPBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DialInfoTCPReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class DialInfoWS:
    socketAddress: SocketAddress | SocketAddressBuilder | SocketAddressReader
    request: str
    def init(self, name: Literal["socketAddress"]) -> SocketAddress: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DialInfoWSReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DialInfoWSReader: ...
    @staticmethod
    def new_message() -> DialInfoWSBuilder: ...
    def to_dict(self) -> dict: ...

class DialInfoWSReader(DialInfoWS):
    socketAddress: SocketAddressReader
    def as_builder(self) -> DialInfoWSBuilder: ...

class DialInfoWSBuilder(DialInfoWS):
    socketAddress: SocketAddress | SocketAddressBuilder | SocketAddressReader
    @staticmethod
    def from_dict(dictionary: dict) -> DialInfoWSBuilder: ...
    def copy(self) -> DialInfoWSBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DialInfoWSReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class DialInfoWSS:
    socketAddress: SocketAddress | SocketAddressBuilder | SocketAddressReader
    request: str
    def init(self, name: Literal["socketAddress"]) -> SocketAddress: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DialInfoWSSReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DialInfoWSSReader: ...
    @staticmethod
    def new_message() -> DialInfoWSSBuilder: ...
    def to_dict(self) -> dict: ...

class DialInfoWSSReader(DialInfoWSS):
    socketAddress: SocketAddressReader
    def as_builder(self) -> DialInfoWSSBuilder: ...

class DialInfoWSSBuilder(DialInfoWSS):
    socketAddress: SocketAddress | SocketAddressBuilder | SocketAddressReader
    @staticmethod
    def from_dict(dictionary: dict) -> DialInfoWSSBuilder: ...
    def copy(self) -> DialInfoWSSBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DialInfoWSSReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class DialInfo:
    udp: DialInfoUDP | DialInfoUDPBuilder | DialInfoUDPReader
    tcp: DialInfoTCP | DialInfoTCPBuilder | DialInfoTCPReader
    ws: DialInfoWS | DialInfoWSBuilder | DialInfoWSReader
    wss: DialInfoWSS | DialInfoWSSBuilder | DialInfoWSSReader
    def which(self) -> Literal["udp", "tcp", "ws", "wss"]: ...
    @overload
    def init(self, name: Literal["udp"]) -> DialInfoUDP: ...
    @overload
    def init(self, name: Literal["tcp"]) -> DialInfoTCP: ...
    @overload
    def init(self, name: Literal["ws"]) -> DialInfoWS: ...
    @overload
    def init(self, name: Literal["wss"]) -> DialInfoWSS: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DialInfoReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DialInfoReader: ...
    @staticmethod
    def new_message() -> DialInfoBuilder: ...
    def to_dict(self) -> dict: ...

class DialInfoReader(DialInfo):
    udp: DialInfoUDPReader
    tcp: DialInfoTCPReader
    ws: DialInfoWSReader
    wss: DialInfoWSSReader
    def as_builder(self) -> DialInfoBuilder: ...

class DialInfoBuilder(DialInfo):
    udp: DialInfoUDP | DialInfoUDPBuilder | DialInfoUDPReader
    tcp: DialInfoTCP | DialInfoTCPBuilder | DialInfoTCPReader
    ws: DialInfoWS | DialInfoWSBuilder | DialInfoWSReader
    wss: DialInfoWSS | DialInfoWSSBuilder | DialInfoWSSReader
    @staticmethod
    def from_dict(dictionary: dict) -> DialInfoBuilder: ...
    def copy(self) -> DialInfoBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DialInfoReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class ProtocolTypeSet:
    udp: bool
    tcp: bool
    ws: bool
    wss: bool
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[ProtocolTypeSetReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> ProtocolTypeSetReader: ...
    @staticmethod
    def new_message() -> ProtocolTypeSetBuilder: ...
    def to_dict(self) -> dict: ...

class ProtocolTypeSetReader(ProtocolTypeSet):
    def as_builder(self) -> ProtocolTypeSetBuilder: ...

class ProtocolTypeSetBuilder(ProtocolTypeSet):
    @staticmethod
    def from_dict(dictionary: dict) -> ProtocolTypeSetBuilder: ...
    def copy(self) -> ProtocolTypeSetBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ProtocolTypeSetReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class AddressTypeSet:
    ipv4: bool
    ipv6: bool
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[AddressTypeSetReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> AddressTypeSetReader: ...
    @staticmethod
    def new_message() -> AddressTypeSetBuilder: ...
    def to_dict(self) -> dict: ...

class AddressTypeSetReader(AddressTypeSet):
    def as_builder(self) -> AddressTypeSetBuilder: ...

class AddressTypeSetBuilder(AddressTypeSet):
    @staticmethod
    def from_dict(dictionary: dict) -> AddressTypeSetBuilder: ...
    def copy(self) -> AddressTypeSetBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> AddressTypeSetReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class DialInfoDetail:
    DialInfoClass = Literal["direct", "mapped", "fullConeNAT", "blocked", "addressRestrictedNAT", "portRestrictedNAT"]
    dialInfo: DialInfo | DialInfoBuilder | DialInfoReader
    dialClass: DialInfoDetail.DialInfoClass
    def init(self, name: Literal["dialInfo"]) -> DialInfo: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[DialInfoDetailReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> DialInfoDetailReader: ...
    @staticmethod
    def new_message() -> DialInfoDetailBuilder: ...
    def to_dict(self) -> dict: ...

class DialInfoDetailReader(DialInfoDetail):
    dialInfo: DialInfoReader
    def as_builder(self) -> DialInfoDetailBuilder: ...

class DialInfoDetailBuilder(DialInfoDetail):
    dialInfo: DialInfo | DialInfoBuilder | DialInfoReader
    @staticmethod
    def from_dict(dictionary: dict) -> DialInfoDetailBuilder: ...
    def copy(self) -> DialInfoDetailBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> DialInfoDetailReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class NodeInfo:
    NetworkClass = Literal["invalid", "inboundCapable", "outboundOnly", "webApp"]
    networkClass: NodeInfo.NetworkClass
    outboundProtocols: ProtocolTypeSet | ProtocolTypeSetBuilder | ProtocolTypeSetReader
    addressTypes: AddressTypeSet | AddressTypeSetBuilder | AddressTypeSetReader
    envelopeSupport: Sequence[int]
    cryptoSupport: Sequence[int]
    capabilities: Sequence[int]
    dialInfoDetailList: Sequence[DialInfoDetail | DialInfoDetailBuilder | DialInfoDetailReader]
    @overload
    def init(self, name: Literal["outboundProtocols"]) -> ProtocolTypeSet: ...
    @overload
    def init(self, name: Literal["addressTypes"]) -> AddressTypeSet: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[NodeInfoReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> NodeInfoReader: ...
    @staticmethod
    def new_message() -> NodeInfoBuilder: ...
    def to_dict(self) -> dict: ...

class NodeInfoReader(NodeInfo):
    outboundProtocols: ProtocolTypeSetReader
    addressTypes: AddressTypeSetReader
    dialInfoDetailList: Sequence[DialInfoDetailReader]
    def as_builder(self) -> NodeInfoBuilder: ...

class NodeInfoBuilder(NodeInfo):
    outboundProtocols: ProtocolTypeSet | ProtocolTypeSetBuilder | ProtocolTypeSetReader
    addressTypes: AddressTypeSet | AddressTypeSetBuilder | AddressTypeSetReader
    dialInfoDetailList: Sequence[DialInfoDetail | DialInfoDetailBuilder | DialInfoDetailReader]
    @staticmethod
    def from_dict(dictionary: dict) -> NodeInfoBuilder: ...
    def copy(self) -> NodeInfoBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> NodeInfoReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SignedDirectNodeInfo:
    nodeInfo: NodeInfo | NodeInfoBuilder | NodeInfoReader
    timestamp: int
    signatures: Sequence[TypedSignature | TypedSignatureBuilder | TypedSignatureReader]
    def init(self, name: Literal["nodeInfo"]) -> NodeInfo: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SignedDirectNodeInfoReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SignedDirectNodeInfoReader: ...
    @staticmethod
    def new_message() -> SignedDirectNodeInfoBuilder: ...
    def to_dict(self) -> dict: ...

class SignedDirectNodeInfoReader(SignedDirectNodeInfo):
    nodeInfo: NodeInfoReader
    signatures: Sequence[TypedSignatureReader]
    def as_builder(self) -> SignedDirectNodeInfoBuilder: ...

class SignedDirectNodeInfoBuilder(SignedDirectNodeInfo):
    nodeInfo: NodeInfo | NodeInfoBuilder | NodeInfoReader
    signatures: Sequence[TypedSignature | TypedSignatureBuilder | TypedSignatureReader]
    @staticmethod
    def from_dict(dictionary: dict) -> SignedDirectNodeInfoBuilder: ...
    def copy(self) -> SignedDirectNodeInfoBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SignedDirectNodeInfoReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SignedRelayedNodeInfo:
    nodeInfo: NodeInfo | NodeInfoBuilder | NodeInfoReader
    relayIds: Sequence[TypedKey | TypedKeyBuilder | TypedKeyReader]
    relayInfo: SignedDirectNodeInfo | SignedDirectNodeInfoBuilder | SignedDirectNodeInfoReader
    timestamp: int
    signatures: Sequence[TypedSignature | TypedSignatureBuilder | TypedSignatureReader]
    @overload
    def init(self, name: Literal["nodeInfo"]) -> NodeInfo: ...
    @overload
    def init(self, name: Literal["relayInfo"]) -> SignedDirectNodeInfo: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SignedRelayedNodeInfoReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SignedRelayedNodeInfoReader: ...
    @staticmethod
    def new_message() -> SignedRelayedNodeInfoBuilder: ...
    def to_dict(self) -> dict: ...

class SignedRelayedNodeInfoReader(SignedRelayedNodeInfo):
    nodeInfo: NodeInfoReader
    relayIds: Sequence[TypedKeyReader]
    relayInfo: SignedDirectNodeInfoReader
    signatures: Sequence[TypedSignatureReader]
    def as_builder(self) -> SignedRelayedNodeInfoBuilder: ...

class SignedRelayedNodeInfoBuilder(SignedRelayedNodeInfo):
    nodeInfo: NodeInfo | NodeInfoBuilder | NodeInfoReader
    relayIds: Sequence[TypedKey | TypedKeyBuilder | TypedKeyReader]
    relayInfo: SignedDirectNodeInfo | SignedDirectNodeInfoBuilder | SignedDirectNodeInfoReader
    signatures: Sequence[TypedSignature | TypedSignatureBuilder | TypedSignatureReader]
    @staticmethod
    def from_dict(dictionary: dict) -> SignedRelayedNodeInfoBuilder: ...
    def copy(self) -> SignedRelayedNodeInfoBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SignedRelayedNodeInfoReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SignedNodeInfo:
    direct: SignedDirectNodeInfo | SignedDirectNodeInfoBuilder | SignedDirectNodeInfoReader
    relayed: SignedRelayedNodeInfo | SignedRelayedNodeInfoBuilder | SignedRelayedNodeInfoReader
    def which(self) -> Literal["direct", "relayed"]: ...
    @overload
    def init(self, name: Literal["direct"]) -> SignedDirectNodeInfo: ...
    @overload
    def init(self, name: Literal["relayed"]) -> SignedRelayedNodeInfo: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SignedNodeInfoReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SignedNodeInfoReader: ...
    @staticmethod
    def new_message() -> SignedNodeInfoBuilder: ...
    def to_dict(self) -> dict: ...

class SignedNodeInfoReader(SignedNodeInfo):
    direct: SignedDirectNodeInfoReader
    relayed: SignedRelayedNodeInfoReader
    def as_builder(self) -> SignedNodeInfoBuilder: ...

class SignedNodeInfoBuilder(SignedNodeInfo):
    direct: SignedDirectNodeInfo | SignedDirectNodeInfoBuilder | SignedDirectNodeInfoReader
    relayed: SignedRelayedNodeInfo | SignedRelayedNodeInfoBuilder | SignedRelayedNodeInfoReader
    @staticmethod
    def from_dict(dictionary: dict) -> SignedNodeInfoBuilder: ...
    def copy(self) -> SignedNodeInfoBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SignedNodeInfoReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class PeerInfo:
    nodeIds: Sequence[TypedKey | TypedKeyBuilder | TypedKeyReader]
    signedNodeInfo: SignedNodeInfo | SignedNodeInfoBuilder | SignedNodeInfoReader
    def init(self, name: Literal["signedNodeInfo"]) -> SignedNodeInfo: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[PeerInfoReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> PeerInfoReader: ...
    @staticmethod
    def new_message() -> PeerInfoBuilder: ...
    def to_dict(self) -> dict: ...

class PeerInfoReader(PeerInfo):
    nodeIds: Sequence[TypedKeyReader]
    signedNodeInfo: SignedNodeInfoReader
    def as_builder(self) -> PeerInfoBuilder: ...

class PeerInfoBuilder(PeerInfo):
    nodeIds: Sequence[TypedKey | TypedKeyBuilder | TypedKeyReader]
    signedNodeInfo: SignedNodeInfo | SignedNodeInfoBuilder | SignedNodeInfoReader
    @staticmethod
    def from_dict(dictionary: dict) -> PeerInfoBuilder: ...
    def copy(self) -> PeerInfoBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> PeerInfoReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SignalInfoHolePunch:
    receipt: bytes
    peerInfo: PeerInfo | PeerInfoBuilder | PeerInfoReader
    def init(self, name: Literal["peerInfo"]) -> PeerInfo: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SignalInfoHolePunchReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SignalInfoHolePunchReader: ...
    @staticmethod
    def new_message() -> SignalInfoHolePunchBuilder: ...
    def to_dict(self) -> dict: ...

class SignalInfoHolePunchReader(SignalInfoHolePunch):
    peerInfo: PeerInfoReader
    def as_builder(self) -> SignalInfoHolePunchBuilder: ...

class SignalInfoHolePunchBuilder(SignalInfoHolePunch):
    peerInfo: PeerInfo | PeerInfoBuilder | PeerInfoReader
    @staticmethod
    def from_dict(dictionary: dict) -> SignalInfoHolePunchBuilder: ...
    def copy(self) -> SignalInfoHolePunchBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SignalInfoHolePunchReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SignalInfoReverseConnect:
    receipt: bytes
    peerInfo: PeerInfo | PeerInfoBuilder | PeerInfoReader
    def init(self, name: Literal["peerInfo"]) -> PeerInfo: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SignalInfoReverseConnectReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SignalInfoReverseConnectReader: ...
    @staticmethod
    def new_message() -> SignalInfoReverseConnectBuilder: ...
    def to_dict(self) -> dict: ...

class SignalInfoReverseConnectReader(SignalInfoReverseConnect):
    peerInfo: PeerInfoReader
    def as_builder(self) -> SignalInfoReverseConnectBuilder: ...

class SignalInfoReverseConnectBuilder(SignalInfoReverseConnect):
    peerInfo: PeerInfo | PeerInfoBuilder | PeerInfoReader
    @staticmethod
    def from_dict(dictionary: dict) -> SignalInfoReverseConnectBuilder: ...
    def copy(self) -> SignalInfoReverseConnectBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SignalInfoReverseConnectReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class RouteHopData:
    nonce: Nonce24 | Nonce24Builder | Nonce24Reader
    blob: bytes
    def init(self, name: Literal["nonce"]) -> Nonce24: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[RouteHopDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> RouteHopDataReader: ...
    @staticmethod
    def new_message() -> RouteHopDataBuilder: ...
    def to_dict(self) -> dict: ...

class RouteHopDataReader(RouteHopData):
    nonce: Nonce24Reader
    def as_builder(self) -> RouteHopDataBuilder: ...

class RouteHopDataBuilder(RouteHopData):
    nonce: Nonce24 | Nonce24Builder | Nonce24Reader
    @staticmethod
    def from_dict(dictionary: dict) -> RouteHopDataBuilder: ...
    def copy(self) -> RouteHopDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> RouteHopDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class RouteHop:
    class Node:
        nodeId: Key256 | Key256Builder | Key256Reader
        peerInfo: PeerInfo | PeerInfoBuilder | PeerInfoReader
        def which(self) -> Literal["nodeId", "peerInfo"]: ...
        @overload
        def init(self, name: Literal["nodeId"]) -> Key256: ...
        @overload
        def init(self, name: Literal["peerInfo"]) -> PeerInfo: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[RouteHop.NodeReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> RouteHop.NodeReader: ...
        @staticmethod
        def new_message() -> RouteHop.NodeBuilder: ...
        def to_dict(self) -> dict: ...

    class NodeReader(RouteHop.Node):
        nodeId: Key256Reader
        peerInfo: PeerInfoReader
        def as_builder(self) -> RouteHop.NodeBuilder: ...

    class NodeBuilder(RouteHop.Node):
        nodeId: Key256 | Key256Builder | Key256Reader
        peerInfo: PeerInfo | PeerInfoBuilder | PeerInfoReader
        @staticmethod
        def from_dict(dictionary: dict) -> RouteHop.NodeBuilder: ...
        def copy(self) -> RouteHop.NodeBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> RouteHop.NodeReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    node: RouteHop.Node | RouteHop.NodeBuilder | RouteHop.NodeReader
    nextHop: RouteHopData | RouteHopDataBuilder | RouteHopDataReader
    @overload
    def init(self, name: Literal["node"]) -> Node: ...
    @overload
    def init(self, name: Literal["nextHop"]) -> RouteHopData: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[RouteHopReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> RouteHopReader: ...
    @staticmethod
    def new_message() -> RouteHopBuilder: ...
    def to_dict(self) -> dict: ...

class RouteHopReader(RouteHop):
    node: RouteHop.NodeReader
    nextHop: RouteHopDataReader
    def as_builder(self) -> RouteHopBuilder: ...

class RouteHopBuilder(RouteHop):
    node: RouteHop.Node | RouteHop.NodeBuilder | RouteHop.NodeReader
    nextHop: RouteHopData | RouteHopDataBuilder | RouteHopDataReader
    @staticmethod
    def from_dict(dictionary: dict) -> RouteHopBuilder: ...
    def copy(self) -> RouteHopBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> RouteHopReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class PrivateRoute:
    class Hops:
        firstHop: RouteHop | RouteHopBuilder | RouteHopReader
        data: RouteHopData | RouteHopDataBuilder | RouteHopDataReader
        empty: None
        def which(self) -> Literal["firstHop", "data", "empty"]: ...
        @overload
        def init(self, name: Literal["firstHop"]) -> RouteHop: ...
        @overload
        def init(self, name: Literal["data"]) -> RouteHopData: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[PrivateRoute.HopsReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> PrivateRoute.HopsReader: ...
        @staticmethod
        def new_message() -> PrivateRoute.HopsBuilder: ...
        def to_dict(self) -> dict: ...

    class HopsReader(PrivateRoute.Hops):
        firstHop: RouteHopReader
        data: RouteHopDataReader
        def as_builder(self) -> PrivateRoute.HopsBuilder: ...

    class HopsBuilder(PrivateRoute.Hops):
        firstHop: RouteHop | RouteHopBuilder | RouteHopReader
        data: RouteHopData | RouteHopDataBuilder | RouteHopDataReader
        @staticmethod
        def from_dict(dictionary: dict) -> PrivateRoute.HopsBuilder: ...
        def copy(self) -> PrivateRoute.HopsBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> PrivateRoute.HopsReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    publicKey: TypedKey | TypedKeyBuilder | TypedKeyReader
    hopCount: int
    hops: PrivateRoute.Hops | PrivateRoute.HopsBuilder | PrivateRoute.HopsReader
    @overload
    def init(self, name: Literal["publicKey"]) -> TypedKey: ...
    @overload
    def init(self, name: Literal["hops"]) -> Hops: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[PrivateRouteReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> PrivateRouteReader: ...
    @staticmethod
    def new_message() -> PrivateRouteBuilder: ...
    def to_dict(self) -> dict: ...

class PrivateRouteReader(PrivateRoute):
    publicKey: TypedKeyReader
    hops: PrivateRoute.HopsReader
    def as_builder(self) -> PrivateRouteBuilder: ...

class PrivateRouteBuilder(PrivateRoute):
    publicKey: TypedKey | TypedKeyBuilder | TypedKeyReader
    hops: PrivateRoute.Hops | PrivateRoute.HopsBuilder | PrivateRoute.HopsReader
    @staticmethod
    def from_dict(dictionary: dict) -> PrivateRouteBuilder: ...
    def copy(self) -> PrivateRouteBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> PrivateRouteReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SafetyRoute:
    class Hops:
        data: RouteHopData | RouteHopDataBuilder | RouteHopDataReader
        private: PrivateRoute | PrivateRouteBuilder | PrivateRouteReader
        def which(self) -> Literal["data", "private"]: ...
        @overload
        def init(self, name: Literal["data"]) -> RouteHopData: ...
        @overload
        def init(self, name: Literal["private"]) -> PrivateRoute: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[SafetyRoute.HopsReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> SafetyRoute.HopsReader: ...
        @staticmethod
        def new_message() -> SafetyRoute.HopsBuilder: ...
        def to_dict(self) -> dict: ...

    class HopsReader(SafetyRoute.Hops):
        data: RouteHopDataReader
        private: PrivateRouteReader
        def as_builder(self) -> SafetyRoute.HopsBuilder: ...

    class HopsBuilder(SafetyRoute.Hops):
        data: RouteHopData | RouteHopDataBuilder | RouteHopDataReader
        private: PrivateRoute | PrivateRouteBuilder | PrivateRouteReader
        @staticmethod
        def from_dict(dictionary: dict) -> SafetyRoute.HopsBuilder: ...
        def copy(self) -> SafetyRoute.HopsBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> SafetyRoute.HopsReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    publicKey: TypedKey | TypedKeyBuilder | TypedKeyReader
    hopCount: int
    hops: SafetyRoute.Hops | SafetyRoute.HopsBuilder | SafetyRoute.HopsReader
    @overload
    def init(self, name: Literal["publicKey"]) -> TypedKey: ...
    @overload
    def init(self, name: Literal["hops"]) -> Hops: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SafetyRouteReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SafetyRouteReader: ...
    @staticmethod
    def new_message() -> SafetyRouteBuilder: ...
    def to_dict(self) -> dict: ...

class SafetyRouteReader(SafetyRoute):
    publicKey: TypedKeyReader
    hops: SafetyRoute.HopsReader
    def as_builder(self) -> SafetyRouteBuilder: ...

class SafetyRouteBuilder(SafetyRoute):
    publicKey: TypedKey | TypedKeyBuilder | TypedKeyReader
    hops: SafetyRoute.Hops | SafetyRoute.HopsBuilder | SafetyRoute.HopsReader
    @staticmethod
    def from_dict(dictionary: dict) -> SafetyRouteBuilder: ...
    def copy(self) -> SafetyRouteBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SafetyRouteReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

Sequencing = Literal["noPreference", "preferOrdered", "ensureOrdered"]

class NodeStatus:
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[NodeStatusReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> NodeStatusReader: ...
    @staticmethod
    def new_message() -> NodeStatusBuilder: ...
    def to_dict(self) -> dict: ...

class NodeStatusReader(NodeStatus):
    def as_builder(self) -> NodeStatusBuilder: ...

class NodeStatusBuilder(NodeStatus):
    @staticmethod
    def from_dict(dictionary: dict) -> NodeStatusBuilder: ...
    def copy(self) -> NodeStatusBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> NodeStatusReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SenderInfo:
    socketAddress: SocketAddress | SocketAddressBuilder | SocketAddressReader
    def init(self, name: Literal["socketAddress"]) -> SocketAddress: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SenderInfoReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SenderInfoReader: ...
    @staticmethod
    def new_message() -> SenderInfoBuilder: ...
    def to_dict(self) -> dict: ...

class SenderInfoReader(SenderInfo):
    socketAddress: SocketAddressReader
    def as_builder(self) -> SenderInfoBuilder: ...

class SenderInfoBuilder(SenderInfo):
    socketAddress: SocketAddress | SocketAddressBuilder | SocketAddressReader
    @staticmethod
    def from_dict(dictionary: dict) -> SenderInfoBuilder: ...
    def copy(self) -> SenderInfoBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SenderInfoReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class RoutedOperation:
    sequencing: Sequencing
    signatures: Sequence[Signature512 | Signature512Builder | Signature512Reader]
    nonce: Nonce24 | Nonce24Builder | Nonce24Reader
    data: bytes
    def init(self, name: Literal["nonce"]) -> Nonce24: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[RoutedOperationReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> RoutedOperationReader: ...
    @staticmethod
    def new_message() -> RoutedOperationBuilder: ...
    def to_dict(self) -> dict: ...

class RoutedOperationReader(RoutedOperation):
    signatures: Sequence[Signature512Reader]
    nonce: Nonce24Reader
    def as_builder(self) -> RoutedOperationBuilder: ...

class RoutedOperationBuilder(RoutedOperation):
    signatures: Sequence[Signature512 | Signature512Builder | Signature512Reader]
    nonce: Nonce24 | Nonce24Builder | Nonce24Reader
    @staticmethod
    def from_dict(dictionary: dict) -> RoutedOperationBuilder: ...
    def copy(self) -> RoutedOperationBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> RoutedOperationReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationStatusQ:
    nodeStatus: NodeStatus | NodeStatusBuilder | NodeStatusReader
    def init(self, name: Literal["nodeStatus"]) -> NodeStatus: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationStatusQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationStatusQReader: ...
    @staticmethod
    def new_message() -> OperationStatusQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationStatusQReader(OperationStatusQ):
    nodeStatus: NodeStatusReader
    def as_builder(self) -> OperationStatusQBuilder: ...

class OperationStatusQBuilder(OperationStatusQ):
    nodeStatus: NodeStatus | NodeStatusBuilder | NodeStatusReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationStatusQBuilder: ...
    def copy(self) -> OperationStatusQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationStatusQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationStatusA:
    nodeStatus: NodeStatus | NodeStatusBuilder | NodeStatusReader
    senderInfo: SenderInfo | SenderInfoBuilder | SenderInfoReader
    @overload
    def init(self, name: Literal["nodeStatus"]) -> NodeStatus: ...
    @overload
    def init(self, name: Literal["senderInfo"]) -> SenderInfo: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationStatusAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationStatusAReader: ...
    @staticmethod
    def new_message() -> OperationStatusABuilder: ...
    def to_dict(self) -> dict: ...

class OperationStatusAReader(OperationStatusA):
    nodeStatus: NodeStatusReader
    senderInfo: SenderInfoReader
    def as_builder(self) -> OperationStatusABuilder: ...

class OperationStatusABuilder(OperationStatusA):
    nodeStatus: NodeStatus | NodeStatusBuilder | NodeStatusReader
    senderInfo: SenderInfo | SenderInfoBuilder | SenderInfoReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationStatusABuilder: ...
    def copy(self) -> OperationStatusABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationStatusAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationValidateDialInfo:
    dialInfo: DialInfo | DialInfoBuilder | DialInfoReader
    receipt: bytes
    redirect: bool
    def init(self, name: Literal["dialInfo"]) -> DialInfo: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationValidateDialInfoReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationValidateDialInfoReader: ...
    @staticmethod
    def new_message() -> OperationValidateDialInfoBuilder: ...
    def to_dict(self) -> dict: ...

class OperationValidateDialInfoReader(OperationValidateDialInfo):
    dialInfo: DialInfoReader
    def as_builder(self) -> OperationValidateDialInfoBuilder: ...

class OperationValidateDialInfoBuilder(OperationValidateDialInfo):
    dialInfo: DialInfo | DialInfoBuilder | DialInfoReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationValidateDialInfoBuilder: ...
    def copy(self) -> OperationValidateDialInfoBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationValidateDialInfoReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationReturnReceipt:
    receipt: bytes
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationReturnReceiptReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationReturnReceiptReader: ...
    @staticmethod
    def new_message() -> OperationReturnReceiptBuilder: ...
    def to_dict(self) -> dict: ...

class OperationReturnReceiptReader(OperationReturnReceipt):
    def as_builder(self) -> OperationReturnReceiptBuilder: ...

class OperationReturnReceiptBuilder(OperationReturnReceipt):
    @staticmethod
    def from_dict(dictionary: dict) -> OperationReturnReceiptBuilder: ...
    def copy(self) -> OperationReturnReceiptBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationReturnReceiptReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationFindNodeQ:
    nodeId: TypedKey | TypedKeyBuilder | TypedKeyReader
    capabilities: Sequence[int]
    def init(self, name: Literal["nodeId"]) -> TypedKey: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationFindNodeQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationFindNodeQReader: ...
    @staticmethod
    def new_message() -> OperationFindNodeQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationFindNodeQReader(OperationFindNodeQ):
    nodeId: TypedKeyReader
    def as_builder(self) -> OperationFindNodeQBuilder: ...

class OperationFindNodeQBuilder(OperationFindNodeQ):
    nodeId: TypedKey | TypedKeyBuilder | TypedKeyReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationFindNodeQBuilder: ...
    def copy(self) -> OperationFindNodeQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationFindNodeQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationFindNodeA:
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationFindNodeAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationFindNodeAReader: ...
    @staticmethod
    def new_message() -> OperationFindNodeABuilder: ...
    def to_dict(self) -> dict: ...

class OperationFindNodeAReader(OperationFindNodeA):
    peers: Sequence[PeerInfoReader]
    def as_builder(self) -> OperationFindNodeABuilder: ...

class OperationFindNodeABuilder(OperationFindNodeA):
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    @staticmethod
    def from_dict(dictionary: dict) -> OperationFindNodeABuilder: ...
    def copy(self) -> OperationFindNodeABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationFindNodeAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationRoute:
    safetyRoute: SafetyRoute | SafetyRouteBuilder | SafetyRouteReader
    operation: RoutedOperation | RoutedOperationBuilder | RoutedOperationReader
    @overload
    def init(self, name: Literal["safetyRoute"]) -> SafetyRoute: ...
    @overload
    def init(self, name: Literal["operation"]) -> RoutedOperation: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationRouteReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationRouteReader: ...
    @staticmethod
    def new_message() -> OperationRouteBuilder: ...
    def to_dict(self) -> dict: ...

class OperationRouteReader(OperationRoute):
    safetyRoute: SafetyRouteReader
    operation: RoutedOperationReader
    def as_builder(self) -> OperationRouteBuilder: ...

class OperationRouteBuilder(OperationRoute):
    safetyRoute: SafetyRoute | SafetyRouteBuilder | SafetyRouteReader
    operation: RoutedOperation | RoutedOperationBuilder | RoutedOperationReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationRouteBuilder: ...
    def copy(self) -> OperationRouteBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationRouteReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationAppCallQ:
    message: bytes
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationAppCallQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationAppCallQReader: ...
    @staticmethod
    def new_message() -> OperationAppCallQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationAppCallQReader(OperationAppCallQ):
    def as_builder(self) -> OperationAppCallQBuilder: ...

class OperationAppCallQBuilder(OperationAppCallQ):
    @staticmethod
    def from_dict(dictionary: dict) -> OperationAppCallQBuilder: ...
    def copy(self) -> OperationAppCallQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationAppCallQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationAppCallA:
    message: bytes
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationAppCallAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationAppCallAReader: ...
    @staticmethod
    def new_message() -> OperationAppCallABuilder: ...
    def to_dict(self) -> dict: ...

class OperationAppCallAReader(OperationAppCallA):
    def as_builder(self) -> OperationAppCallABuilder: ...

class OperationAppCallABuilder(OperationAppCallA):
    @staticmethod
    def from_dict(dictionary: dict) -> OperationAppCallABuilder: ...
    def copy(self) -> OperationAppCallABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationAppCallAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationAppMessage:
    message: bytes
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationAppMessageReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationAppMessageReader: ...
    @staticmethod
    def new_message() -> OperationAppMessageBuilder: ...
    def to_dict(self) -> dict: ...

class OperationAppMessageReader(OperationAppMessage):
    def as_builder(self) -> OperationAppMessageBuilder: ...

class OperationAppMessageBuilder(OperationAppMessage):
    @staticmethod
    def from_dict(dictionary: dict) -> OperationAppMessageBuilder: ...
    def copy(self) -> OperationAppMessageBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationAppMessageReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SubkeyRange:
    start: int
    end: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SubkeyRangeReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SubkeyRangeReader: ...
    @staticmethod
    def new_message() -> SubkeyRangeBuilder: ...
    def to_dict(self) -> dict: ...

class SubkeyRangeReader(SubkeyRange):
    def as_builder(self) -> SubkeyRangeBuilder: ...

class SubkeyRangeBuilder(SubkeyRange):
    @staticmethod
    def from_dict(dictionary: dict) -> SubkeyRangeBuilder: ...
    def copy(self) -> SubkeyRangeBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SubkeyRangeReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SignedValueData:
    seq: int
    data: bytes
    writer: Key256 | Key256Builder | Key256Reader
    signature: Signature512 | Signature512Builder | Signature512Reader
    @overload
    def init(self, name: Literal["writer"]) -> Key256: ...
    @overload
    def init(self, name: Literal["signature"]) -> Signature512: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SignedValueDataReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SignedValueDataReader: ...
    @staticmethod
    def new_message() -> SignedValueDataBuilder: ...
    def to_dict(self) -> dict: ...

class SignedValueDataReader(SignedValueData):
    writer: Key256Reader
    signature: Signature512Reader
    def as_builder(self) -> SignedValueDataBuilder: ...

class SignedValueDataBuilder(SignedValueData):
    writer: Key256 | Key256Builder | Key256Reader
    signature: Signature512 | Signature512Builder | Signature512Reader
    @staticmethod
    def from_dict(dictionary: dict) -> SignedValueDataBuilder: ...
    def copy(self) -> SignedValueDataBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SignedValueDataReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class SignedValueDescriptor:
    owner: Key256 | Key256Builder | Key256Reader
    schemaData: bytes
    signature: Signature512 | Signature512Builder | Signature512Reader
    @overload
    def init(self, name: Literal["owner"]) -> Key256: ...
    @overload
    def init(self, name: Literal["signature"]) -> Signature512: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[SignedValueDescriptorReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> SignedValueDescriptorReader: ...
    @staticmethod
    def new_message() -> SignedValueDescriptorBuilder: ...
    def to_dict(self) -> dict: ...

class SignedValueDescriptorReader(SignedValueDescriptor):
    owner: Key256Reader
    signature: Signature512Reader
    def as_builder(self) -> SignedValueDescriptorBuilder: ...

class SignedValueDescriptorBuilder(SignedValueDescriptor):
    owner: Key256 | Key256Builder | Key256Reader
    signature: Signature512 | Signature512Builder | Signature512Reader
    @staticmethod
    def from_dict(dictionary: dict) -> SignedValueDescriptorBuilder: ...
    def copy(self) -> SignedValueDescriptorBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> SignedValueDescriptorReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationGetValueQ:
    key: TypedKey | TypedKeyBuilder | TypedKeyReader
    subkey: int
    wantDescriptor: bool
    def init(self, name: Literal["key"]) -> TypedKey: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationGetValueQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationGetValueQReader: ...
    @staticmethod
    def new_message() -> OperationGetValueQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationGetValueQReader(OperationGetValueQ):
    key: TypedKeyReader
    def as_builder(self) -> OperationGetValueQBuilder: ...

class OperationGetValueQBuilder(OperationGetValueQ):
    key: TypedKey | TypedKeyBuilder | TypedKeyReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationGetValueQBuilder: ...
    def copy(self) -> OperationGetValueQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationGetValueQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationGetValueA:
    value: SignedValueData | SignedValueDataBuilder | SignedValueDataReader
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    descriptor: SignedValueDescriptor | SignedValueDescriptorBuilder | SignedValueDescriptorReader
    @overload
    def init(self, name: Literal["value"]) -> SignedValueData: ...
    @overload
    def init(self, name: Literal["descriptor"]) -> SignedValueDescriptor: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationGetValueAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationGetValueAReader: ...
    @staticmethod
    def new_message() -> OperationGetValueABuilder: ...
    def to_dict(self) -> dict: ...

class OperationGetValueAReader(OperationGetValueA):
    value: SignedValueDataReader
    peers: Sequence[PeerInfoReader]
    descriptor: SignedValueDescriptorReader
    def as_builder(self) -> OperationGetValueABuilder: ...

class OperationGetValueABuilder(OperationGetValueA):
    value: SignedValueData | SignedValueDataBuilder | SignedValueDataReader
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    descriptor: SignedValueDescriptor | SignedValueDescriptorBuilder | SignedValueDescriptorReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationGetValueABuilder: ...
    def copy(self) -> OperationGetValueABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationGetValueAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationSetValueQ:
    key: TypedKey | TypedKeyBuilder | TypedKeyReader
    subkey: int
    value: SignedValueData | SignedValueDataBuilder | SignedValueDataReader
    descriptor: SignedValueDescriptor | SignedValueDescriptorBuilder | SignedValueDescriptorReader
    @overload
    def init(self, name: Literal["key"]) -> TypedKey: ...
    @overload
    def init(self, name: Literal["value"]) -> SignedValueData: ...
    @overload
    def init(self, name: Literal["descriptor"]) -> SignedValueDescriptor: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationSetValueQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationSetValueQReader: ...
    @staticmethod
    def new_message() -> OperationSetValueQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationSetValueQReader(OperationSetValueQ):
    key: TypedKeyReader
    value: SignedValueDataReader
    descriptor: SignedValueDescriptorReader
    def as_builder(self) -> OperationSetValueQBuilder: ...

class OperationSetValueQBuilder(OperationSetValueQ):
    key: TypedKey | TypedKeyBuilder | TypedKeyReader
    value: SignedValueData | SignedValueDataBuilder | SignedValueDataReader
    descriptor: SignedValueDescriptor | SignedValueDescriptorBuilder | SignedValueDescriptorReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationSetValueQBuilder: ...
    def copy(self) -> OperationSetValueQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationSetValueQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationSetValueA:
    set: bool
    value: SignedValueData | SignedValueDataBuilder | SignedValueDataReader
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    def init(self, name: Literal["value"]) -> SignedValueData: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationSetValueAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationSetValueAReader: ...
    @staticmethod
    def new_message() -> OperationSetValueABuilder: ...
    def to_dict(self) -> dict: ...

class OperationSetValueAReader(OperationSetValueA):
    value: SignedValueDataReader
    peers: Sequence[PeerInfoReader]
    def as_builder(self) -> OperationSetValueABuilder: ...

class OperationSetValueABuilder(OperationSetValueA):
    value: SignedValueData | SignedValueDataBuilder | SignedValueDataReader
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    @staticmethod
    def from_dict(dictionary: dict) -> OperationSetValueABuilder: ...
    def copy(self) -> OperationSetValueABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationSetValueAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationWatchValueQ:
    key: TypedKey | TypedKeyBuilder | TypedKeyReader
    subkeys: Sequence[SubkeyRange | SubkeyRangeBuilder | SubkeyRangeReader]
    expiration: int
    count: int
    watcher: Key256 | Key256Builder | Key256Reader
    signature: Signature512 | Signature512Builder | Signature512Reader
    @overload
    def init(self, name: Literal["key"]) -> TypedKey: ...
    @overload
    def init(self, name: Literal["watcher"]) -> Key256: ...
    @overload
    def init(self, name: Literal["signature"]) -> Signature512: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationWatchValueQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationWatchValueQReader: ...
    @staticmethod
    def new_message() -> OperationWatchValueQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationWatchValueQReader(OperationWatchValueQ):
    key: TypedKeyReader
    subkeys: Sequence[SubkeyRangeReader]
    watcher: Key256Reader
    signature: Signature512Reader
    def as_builder(self) -> OperationWatchValueQBuilder: ...

class OperationWatchValueQBuilder(OperationWatchValueQ):
    key: TypedKey | TypedKeyBuilder | TypedKeyReader
    subkeys: Sequence[SubkeyRange | SubkeyRangeBuilder | SubkeyRangeReader]
    watcher: Key256 | Key256Builder | Key256Reader
    signature: Signature512 | Signature512Builder | Signature512Reader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationWatchValueQBuilder: ...
    def copy(self) -> OperationWatchValueQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationWatchValueQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationWatchValueA:
    expiration: int
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationWatchValueAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationWatchValueAReader: ...
    @staticmethod
    def new_message() -> OperationWatchValueABuilder: ...
    def to_dict(self) -> dict: ...

class OperationWatchValueAReader(OperationWatchValueA):
    peers: Sequence[PeerInfoReader]
    def as_builder(self) -> OperationWatchValueABuilder: ...

class OperationWatchValueABuilder(OperationWatchValueA):
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    @staticmethod
    def from_dict(dictionary: dict) -> OperationWatchValueABuilder: ...
    def copy(self) -> OperationWatchValueABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationWatchValueAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationValueChanged:
    key: TypedKey | TypedKeyBuilder | TypedKeyReader
    subkeys: Sequence[SubkeyRange | SubkeyRangeBuilder | SubkeyRangeReader]
    count: int
    value: SignedValueData | SignedValueDataBuilder | SignedValueDataReader
    @overload
    def init(self, name: Literal["key"]) -> TypedKey: ...
    @overload
    def init(self, name: Literal["value"]) -> SignedValueData: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationValueChangedReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationValueChangedReader: ...
    @staticmethod
    def new_message() -> OperationValueChangedBuilder: ...
    def to_dict(self) -> dict: ...

class OperationValueChangedReader(OperationValueChanged):
    key: TypedKeyReader
    subkeys: Sequence[SubkeyRangeReader]
    value: SignedValueDataReader
    def as_builder(self) -> OperationValueChangedBuilder: ...

class OperationValueChangedBuilder(OperationValueChanged):
    key: TypedKey | TypedKeyBuilder | TypedKeyReader
    subkeys: Sequence[SubkeyRange | SubkeyRangeBuilder | SubkeyRangeReader]
    value: SignedValueData | SignedValueDataBuilder | SignedValueDataReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationValueChangedBuilder: ...
    def copy(self) -> OperationValueChangedBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationValueChangedReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationSupplyBlockQ:
    blockId: TypedKey | TypedKeyBuilder | TypedKeyReader
    def init(self, name: Literal["blockId"]) -> TypedKey: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationSupplyBlockQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationSupplyBlockQReader: ...
    @staticmethod
    def new_message() -> OperationSupplyBlockQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationSupplyBlockQReader(OperationSupplyBlockQ):
    blockId: TypedKeyReader
    def as_builder(self) -> OperationSupplyBlockQBuilder: ...

class OperationSupplyBlockQBuilder(OperationSupplyBlockQ):
    blockId: TypedKey | TypedKeyBuilder | TypedKeyReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationSupplyBlockQBuilder: ...
    def copy(self) -> OperationSupplyBlockQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationSupplyBlockQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationSupplyBlockA:
    expiration: int
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationSupplyBlockAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationSupplyBlockAReader: ...
    @staticmethod
    def new_message() -> OperationSupplyBlockABuilder: ...
    def to_dict(self) -> dict: ...

class OperationSupplyBlockAReader(OperationSupplyBlockA):
    peers: Sequence[PeerInfoReader]
    def as_builder(self) -> OperationSupplyBlockABuilder: ...

class OperationSupplyBlockABuilder(OperationSupplyBlockA):
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    @staticmethod
    def from_dict(dictionary: dict) -> OperationSupplyBlockABuilder: ...
    def copy(self) -> OperationSupplyBlockABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationSupplyBlockAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationFindBlockQ:
    blockId: TypedKey | TypedKeyBuilder | TypedKeyReader
    def init(self, name: Literal["blockId"]) -> TypedKey: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationFindBlockQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationFindBlockQReader: ...
    @staticmethod
    def new_message() -> OperationFindBlockQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationFindBlockQReader(OperationFindBlockQ):
    blockId: TypedKeyReader
    def as_builder(self) -> OperationFindBlockQBuilder: ...

class OperationFindBlockQBuilder(OperationFindBlockQ):
    blockId: TypedKey | TypedKeyBuilder | TypedKeyReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationFindBlockQBuilder: ...
    def copy(self) -> OperationFindBlockQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationFindBlockQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationFindBlockA:
    data: bytes
    suppliers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationFindBlockAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationFindBlockAReader: ...
    @staticmethod
    def new_message() -> OperationFindBlockABuilder: ...
    def to_dict(self) -> dict: ...

class OperationFindBlockAReader(OperationFindBlockA):
    suppliers: Sequence[PeerInfoReader]
    peers: Sequence[PeerInfoReader]
    def as_builder(self) -> OperationFindBlockABuilder: ...

class OperationFindBlockABuilder(OperationFindBlockA):
    suppliers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    peers: Sequence[PeerInfo | PeerInfoBuilder | PeerInfoReader]
    @staticmethod
    def from_dict(dictionary: dict) -> OperationFindBlockABuilder: ...
    def copy(self) -> OperationFindBlockABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationFindBlockAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationSignal:
    holePunch: SignalInfoHolePunch | SignalInfoHolePunchBuilder | SignalInfoHolePunchReader
    reverseConnect: SignalInfoReverseConnect | SignalInfoReverseConnectBuilder | SignalInfoReverseConnectReader
    def which(self) -> Literal["holePunch", "reverseConnect"]: ...
    @overload
    def init(self, name: Literal["holePunch"]) -> SignalInfoHolePunch: ...
    @overload
    def init(self, name: Literal["reverseConnect"]) -> SignalInfoReverseConnect: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationSignalReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationSignalReader: ...
    @staticmethod
    def new_message() -> OperationSignalBuilder: ...
    def to_dict(self) -> dict: ...

class OperationSignalReader(OperationSignal):
    holePunch: SignalInfoHolePunchReader
    reverseConnect: SignalInfoReverseConnectReader
    def as_builder(self) -> OperationSignalBuilder: ...

class OperationSignalBuilder(OperationSignal):
    holePunch: SignalInfoHolePunch | SignalInfoHolePunchBuilder | SignalInfoHolePunchReader
    reverseConnect: SignalInfoReverseConnect | SignalInfoReverseConnectBuilder | SignalInfoReverseConnectReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationSignalBuilder: ...
    def copy(self) -> OperationSignalBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationSignalReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

TunnelEndpointMode = Literal["raw", "turn"]
TunnelError = Literal["badId", "noEndpoint", "rejectedMode", "noCapacity"]

class TunnelEndpoint:
    mode: TunnelEndpointMode
    description: str
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[TunnelEndpointReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> TunnelEndpointReader: ...
    @staticmethod
    def new_message() -> TunnelEndpointBuilder: ...
    def to_dict(self) -> dict: ...

class TunnelEndpointReader(TunnelEndpoint):
    def as_builder(self) -> TunnelEndpointBuilder: ...

class TunnelEndpointBuilder(TunnelEndpoint):
    @staticmethod
    def from_dict(dictionary: dict) -> TunnelEndpointBuilder: ...
    def copy(self) -> TunnelEndpointBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TunnelEndpointReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class FullTunnel:
    id: int
    timeout: int
    local: TunnelEndpoint | TunnelEndpointBuilder | TunnelEndpointReader
    remote: TunnelEndpoint | TunnelEndpointBuilder | TunnelEndpointReader
    @overload
    def init(self, name: Literal["local"]) -> TunnelEndpoint: ...
    @overload
    def init(self, name: Literal["remote"]) -> TunnelEndpoint: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[FullTunnelReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> FullTunnelReader: ...
    @staticmethod
    def new_message() -> FullTunnelBuilder: ...
    def to_dict(self) -> dict: ...

class FullTunnelReader(FullTunnel):
    local: TunnelEndpointReader
    remote: TunnelEndpointReader
    def as_builder(self) -> FullTunnelBuilder: ...

class FullTunnelBuilder(FullTunnel):
    local: TunnelEndpoint | TunnelEndpointBuilder | TunnelEndpointReader
    remote: TunnelEndpoint | TunnelEndpointBuilder | TunnelEndpointReader
    @staticmethod
    def from_dict(dictionary: dict) -> FullTunnelBuilder: ...
    def copy(self) -> FullTunnelBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> FullTunnelReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class PartialTunnel:
    id: int
    timeout: int
    local: TunnelEndpoint | TunnelEndpointBuilder | TunnelEndpointReader
    def init(self, name: Literal["local"]) -> TunnelEndpoint: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[PartialTunnelReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> PartialTunnelReader: ...
    @staticmethod
    def new_message() -> PartialTunnelBuilder: ...
    def to_dict(self) -> dict: ...

class PartialTunnelReader(PartialTunnel):
    local: TunnelEndpointReader
    def as_builder(self) -> PartialTunnelBuilder: ...

class PartialTunnelBuilder(PartialTunnel):
    local: TunnelEndpoint | TunnelEndpointBuilder | TunnelEndpointReader
    @staticmethod
    def from_dict(dictionary: dict) -> PartialTunnelBuilder: ...
    def copy(self) -> PartialTunnelBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> PartialTunnelReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationStartTunnelQ:
    id: int
    localMode: TunnelEndpointMode
    depth: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationStartTunnelQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationStartTunnelQReader: ...
    @staticmethod
    def new_message() -> OperationStartTunnelQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationStartTunnelQReader(OperationStartTunnelQ):
    def as_builder(self) -> OperationStartTunnelQBuilder: ...

class OperationStartTunnelQBuilder(OperationStartTunnelQ):
    @staticmethod
    def from_dict(dictionary: dict) -> OperationStartTunnelQBuilder: ...
    def copy(self) -> OperationStartTunnelQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationStartTunnelQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationStartTunnelA:
    partial: PartialTunnel | PartialTunnelBuilder | PartialTunnelReader
    error: TunnelError
    def which(self) -> Literal["partial", "error"]: ...
    def init(self, name: Literal["partial"]) -> PartialTunnel: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationStartTunnelAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationStartTunnelAReader: ...
    @staticmethod
    def new_message() -> OperationStartTunnelABuilder: ...
    def to_dict(self) -> dict: ...

class OperationStartTunnelAReader(OperationStartTunnelA):
    partial: PartialTunnelReader
    def as_builder(self) -> OperationStartTunnelABuilder: ...

class OperationStartTunnelABuilder(OperationStartTunnelA):
    partial: PartialTunnel | PartialTunnelBuilder | PartialTunnelReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationStartTunnelABuilder: ...
    def copy(self) -> OperationStartTunnelABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationStartTunnelAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationCompleteTunnelQ:
    id: int
    localMode: TunnelEndpointMode
    depth: int
    endpoint: TunnelEndpoint | TunnelEndpointBuilder | TunnelEndpointReader
    def init(self, name: Literal["endpoint"]) -> TunnelEndpoint: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationCompleteTunnelQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationCompleteTunnelQReader: ...
    @staticmethod
    def new_message() -> OperationCompleteTunnelQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationCompleteTunnelQReader(OperationCompleteTunnelQ):
    endpoint: TunnelEndpointReader
    def as_builder(self) -> OperationCompleteTunnelQBuilder: ...

class OperationCompleteTunnelQBuilder(OperationCompleteTunnelQ):
    endpoint: TunnelEndpoint | TunnelEndpointBuilder | TunnelEndpointReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationCompleteTunnelQBuilder: ...
    def copy(self) -> OperationCompleteTunnelQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationCompleteTunnelQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationCompleteTunnelA:
    tunnel: FullTunnel | FullTunnelBuilder | FullTunnelReader
    error: TunnelError
    def which(self) -> Literal["tunnel", "error"]: ...
    def init(self, name: Literal["tunnel"]) -> FullTunnel: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationCompleteTunnelAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationCompleteTunnelAReader: ...
    @staticmethod
    def new_message() -> OperationCompleteTunnelABuilder: ...
    def to_dict(self) -> dict: ...

class OperationCompleteTunnelAReader(OperationCompleteTunnelA):
    tunnel: FullTunnelReader
    def as_builder(self) -> OperationCompleteTunnelABuilder: ...

class OperationCompleteTunnelABuilder(OperationCompleteTunnelA):
    tunnel: FullTunnel | FullTunnelBuilder | FullTunnelReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationCompleteTunnelABuilder: ...
    def copy(self) -> OperationCompleteTunnelABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationCompleteTunnelAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationCancelTunnelQ:
    id: int
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationCancelTunnelQReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationCancelTunnelQReader: ...
    @staticmethod
    def new_message() -> OperationCancelTunnelQBuilder: ...
    def to_dict(self) -> dict: ...

class OperationCancelTunnelQReader(OperationCancelTunnelQ):
    def as_builder(self) -> OperationCancelTunnelQBuilder: ...

class OperationCancelTunnelQBuilder(OperationCancelTunnelQ):
    @staticmethod
    def from_dict(dictionary: dict) -> OperationCancelTunnelQBuilder: ...
    def copy(self) -> OperationCancelTunnelQBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationCancelTunnelQReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class OperationCancelTunnelA:
    tunnel: int
    error: TunnelError
    def which(self) -> Literal["tunnel", "error"]: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationCancelTunnelAReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationCancelTunnelAReader: ...
    @staticmethod
    def new_message() -> OperationCancelTunnelABuilder: ...
    def to_dict(self) -> dict: ...

class OperationCancelTunnelAReader(OperationCancelTunnelA):
    def as_builder(self) -> OperationCancelTunnelABuilder: ...

class OperationCancelTunnelABuilder(OperationCancelTunnelA):
    @staticmethod
    def from_dict(dictionary: dict) -> OperationCancelTunnelABuilder: ...
    def copy(self) -> OperationCancelTunnelABuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationCancelTunnelAReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Question:
    class RespondTo:
        sender: None
        privateRoute: PrivateRoute | PrivateRouteBuilder | PrivateRouteReader
        def which(self) -> Literal["sender", "privateRoute"]: ...
        def init(self, name: Literal["privateRoute"]) -> PrivateRoute: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[Question.RespondToReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Question.RespondToReader: ...
        @staticmethod
        def new_message() -> Question.RespondToBuilder: ...
        def to_dict(self) -> dict: ...

    class RespondToReader(Question.RespondTo):
        privateRoute: PrivateRouteReader
        def as_builder(self) -> Question.RespondToBuilder: ...

    class RespondToBuilder(Question.RespondTo):
        privateRoute: PrivateRoute | PrivateRouteBuilder | PrivateRouteReader
        @staticmethod
        def from_dict(dictionary: dict) -> Question.RespondToBuilder: ...
        def copy(self) -> Question.RespondToBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Question.RespondToReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class Detail:
        statusQ: OperationStatusQ | OperationStatusQBuilder | OperationStatusQReader
        findNodeQ: OperationFindNodeQ | OperationFindNodeQBuilder | OperationFindNodeQReader
        appCallQ: OperationAppCallQ | OperationAppCallQBuilder | OperationAppCallQReader
        getValueQ: OperationGetValueQ | OperationGetValueQBuilder | OperationGetValueQReader
        setValueQ: OperationSetValueQ | OperationSetValueQBuilder | OperationSetValueQReader
        watchValueQ: OperationWatchValueQ | OperationWatchValueQBuilder | OperationWatchValueQReader
        def which(self) -> Literal["statusQ", "findNodeQ", "appCallQ", "getValueQ", "setValueQ", "watchValueQ"]: ...
        @overload
        def init(self, name: Literal["statusQ"]) -> OperationStatusQ: ...
        @overload
        def init(self, name: Literal["findNodeQ"]) -> OperationFindNodeQ: ...
        @overload
        def init(self, name: Literal["appCallQ"]) -> OperationAppCallQ: ...
        @overload
        def init(self, name: Literal["getValueQ"]) -> OperationGetValueQ: ...
        @overload
        def init(self, name: Literal["setValueQ"]) -> OperationSetValueQ: ...
        @overload
        def init(self, name: Literal["watchValueQ"]) -> OperationWatchValueQ: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[Question.DetailReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Question.DetailReader: ...
        @staticmethod
        def new_message() -> Question.DetailBuilder: ...
        def to_dict(self) -> dict: ...

    class DetailReader(Question.Detail):
        statusQ: OperationStatusQReader
        findNodeQ: OperationFindNodeQReader
        appCallQ: OperationAppCallQReader
        getValueQ: OperationGetValueQReader
        setValueQ: OperationSetValueQReader
        watchValueQ: OperationWatchValueQReader
        def as_builder(self) -> Question.DetailBuilder: ...

    class DetailBuilder(Question.Detail):
        statusQ: OperationStatusQ | OperationStatusQBuilder | OperationStatusQReader
        findNodeQ: OperationFindNodeQ | OperationFindNodeQBuilder | OperationFindNodeQReader
        appCallQ: OperationAppCallQ | OperationAppCallQBuilder | OperationAppCallQReader
        getValueQ: OperationGetValueQ | OperationGetValueQBuilder | OperationGetValueQReader
        setValueQ: OperationSetValueQ | OperationSetValueQBuilder | OperationSetValueQReader
        watchValueQ: OperationWatchValueQ | OperationWatchValueQBuilder | OperationWatchValueQReader
        @staticmethod
        def from_dict(dictionary: dict) -> Question.DetailBuilder: ...
        def copy(self) -> Question.DetailBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Question.DetailReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    respondTo: Question.RespondTo | Question.RespondToBuilder | Question.RespondToReader
    detail: Question.Detail | Question.DetailBuilder | Question.DetailReader
    @overload
    def init(self, name: Literal["respondTo"]) -> RespondTo: ...
    @overload
    def init(self, name: Literal["detail"]) -> Detail: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[QuestionReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> QuestionReader: ...
    @staticmethod
    def new_message() -> QuestionBuilder: ...
    def to_dict(self) -> dict: ...

class QuestionReader(Question):
    respondTo: Question.RespondToReader
    detail: Question.DetailReader
    def as_builder(self) -> QuestionBuilder: ...

class QuestionBuilder(Question):
    respondTo: Question.RespondTo | Question.RespondToBuilder | Question.RespondToReader
    detail: Question.Detail | Question.DetailBuilder | Question.DetailReader
    @staticmethod
    def from_dict(dictionary: dict) -> QuestionBuilder: ...
    def copy(self) -> QuestionBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> QuestionReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Statement:
    class Detail:
        validateDialInfo: OperationValidateDialInfo | OperationValidateDialInfoBuilder | OperationValidateDialInfoReader
        route: OperationRoute | OperationRouteBuilder | OperationRouteReader
        signal: OperationSignal | OperationSignalBuilder | OperationSignalReader
        returnReceipt: OperationReturnReceipt | OperationReturnReceiptBuilder | OperationReturnReceiptReader
        appMessage: OperationAppMessage | OperationAppMessageBuilder | OperationAppMessageReader
        valueChanged: OperationValueChanged | OperationValueChangedBuilder | OperationValueChangedReader
        def which(
            self,
        ) -> Literal["validateDialInfo", "route", "signal", "returnReceipt", "appMessage", "valueChanged"]: ...
        @overload
        def init(self, name: Literal["validateDialInfo"]) -> OperationValidateDialInfo: ...
        @overload
        def init(self, name: Literal["route"]) -> OperationRoute: ...
        @overload
        def init(self, name: Literal["signal"]) -> OperationSignal: ...
        @overload
        def init(self, name: Literal["returnReceipt"]) -> OperationReturnReceipt: ...
        @overload
        def init(self, name: Literal["appMessage"]) -> OperationAppMessage: ...
        @overload
        def init(self, name: Literal["valueChanged"]) -> OperationValueChanged: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[Statement.DetailReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Statement.DetailReader: ...
        @staticmethod
        def new_message() -> Statement.DetailBuilder: ...
        def to_dict(self) -> dict: ...

    class DetailReader(Statement.Detail):
        validateDialInfo: OperationValidateDialInfoReader
        route: OperationRouteReader
        signal: OperationSignalReader
        returnReceipt: OperationReturnReceiptReader
        appMessage: OperationAppMessageReader
        valueChanged: OperationValueChangedReader
        def as_builder(self) -> Statement.DetailBuilder: ...

    class DetailBuilder(Statement.Detail):
        validateDialInfo: OperationValidateDialInfo | OperationValidateDialInfoBuilder | OperationValidateDialInfoReader
        route: OperationRoute | OperationRouteBuilder | OperationRouteReader
        signal: OperationSignal | OperationSignalBuilder | OperationSignalReader
        returnReceipt: OperationReturnReceipt | OperationReturnReceiptBuilder | OperationReturnReceiptReader
        appMessage: OperationAppMessage | OperationAppMessageBuilder | OperationAppMessageReader
        valueChanged: OperationValueChanged | OperationValueChangedBuilder | OperationValueChangedReader
        @staticmethod
        def from_dict(dictionary: dict) -> Statement.DetailBuilder: ...
        def copy(self) -> Statement.DetailBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Statement.DetailReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    detail: Statement.Detail | Statement.DetailBuilder | Statement.DetailReader
    def init(self, name: Literal["detail"]) -> Detail: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[StatementReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> StatementReader: ...
    @staticmethod
    def new_message() -> StatementBuilder: ...
    def to_dict(self) -> dict: ...

class StatementReader(Statement):
    detail: Statement.DetailReader
    def as_builder(self) -> StatementBuilder: ...

class StatementBuilder(Statement):
    detail: Statement.Detail | Statement.DetailBuilder | Statement.DetailReader
    @staticmethod
    def from_dict(dictionary: dict) -> StatementBuilder: ...
    def copy(self) -> StatementBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> StatementReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Answer:
    class Detail:
        statusA: OperationStatusA | OperationStatusABuilder | OperationStatusAReader
        findNodeA: OperationFindNodeA | OperationFindNodeABuilder | OperationFindNodeAReader
        appCallA: OperationAppCallA | OperationAppCallABuilder | OperationAppCallAReader
        getValueA: OperationGetValueA | OperationGetValueABuilder | OperationGetValueAReader
        setValueA: OperationSetValueA | OperationSetValueABuilder | OperationSetValueAReader
        watchValueA: OperationWatchValueA | OperationWatchValueABuilder | OperationWatchValueAReader
        def which(self) -> Literal["statusA", "findNodeA", "appCallA", "getValueA", "setValueA", "watchValueA"]: ...
        @overload
        def init(self, name: Literal["statusA"]) -> OperationStatusA: ...
        @overload
        def init(self, name: Literal["findNodeA"]) -> OperationFindNodeA: ...
        @overload
        def init(self, name: Literal["appCallA"]) -> OperationAppCallA: ...
        @overload
        def init(self, name: Literal["getValueA"]) -> OperationGetValueA: ...
        @overload
        def init(self, name: Literal["setValueA"]) -> OperationSetValueA: ...
        @overload
        def init(self, name: Literal["watchValueA"]) -> OperationWatchValueA: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[Answer.DetailReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Answer.DetailReader: ...
        @staticmethod
        def new_message() -> Answer.DetailBuilder: ...
        def to_dict(self) -> dict: ...

    class DetailReader(Answer.Detail):
        statusA: OperationStatusAReader
        findNodeA: OperationFindNodeAReader
        appCallA: OperationAppCallAReader
        getValueA: OperationGetValueAReader
        setValueA: OperationSetValueAReader
        watchValueA: OperationWatchValueAReader
        def as_builder(self) -> Answer.DetailBuilder: ...

    class DetailBuilder(Answer.Detail):
        statusA: OperationStatusA | OperationStatusABuilder | OperationStatusAReader
        findNodeA: OperationFindNodeA | OperationFindNodeABuilder | OperationFindNodeAReader
        appCallA: OperationAppCallA | OperationAppCallABuilder | OperationAppCallAReader
        getValueA: OperationGetValueA | OperationGetValueABuilder | OperationGetValueAReader
        setValueA: OperationSetValueA | OperationSetValueABuilder | OperationSetValueAReader
        watchValueA: OperationWatchValueA | OperationWatchValueABuilder | OperationWatchValueAReader
        @staticmethod
        def from_dict(dictionary: dict) -> Answer.DetailBuilder: ...
        def copy(self) -> Answer.DetailBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Answer.DetailReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    detail: Answer.Detail | Answer.DetailBuilder | Answer.DetailReader
    def init(self, name: Literal["detail"]) -> Detail: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[AnswerReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> AnswerReader: ...
    @staticmethod
    def new_message() -> AnswerBuilder: ...
    def to_dict(self) -> dict: ...

class AnswerReader(Answer):
    detail: Answer.DetailReader
    def as_builder(self) -> AnswerBuilder: ...

class AnswerBuilder(Answer):
    detail: Answer.Detail | Answer.DetailBuilder | Answer.DetailReader
    @staticmethod
    def from_dict(dictionary: dict) -> AnswerBuilder: ...
    def copy(self) -> AnswerBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> AnswerReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Operation:
    class Kind:
        question: Question | QuestionBuilder | QuestionReader
        statement: Statement | StatementBuilder | StatementReader
        answer: Answer | AnswerBuilder | AnswerReader
        def which(self) -> Literal["question", "statement", "answer"]: ...
        @overload
        def init(self, name: Literal["question"]) -> Question: ...
        @overload
        def init(self, name: Literal["statement"]) -> Statement: ...
        @overload
        def init(self, name: Literal["answer"]) -> Answer: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Iterator[Operation.KindReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
        ) -> Operation.KindReader: ...
        @staticmethod
        def new_message() -> Operation.KindBuilder: ...
        def to_dict(self) -> dict: ...

    class KindReader(Operation.Kind):
        question: QuestionReader
        statement: StatementReader
        answer: AnswerReader
        def as_builder(self) -> Operation.KindBuilder: ...

    class KindBuilder(Operation.Kind):
        question: Question | QuestionBuilder | QuestionReader
        statement: Statement | StatementBuilder | StatementReader
        answer: Answer | AnswerBuilder | AnswerReader
        @staticmethod
        def from_dict(dictionary: dict) -> Operation.KindBuilder: ...
        def copy(self) -> Operation.KindBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Operation.KindReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    opId: int
    senderPeerInfo: PeerInfo | PeerInfoBuilder | PeerInfoReader
    targetNodeInfoTs: int
    kind: Operation.Kind | Operation.KindBuilder | Operation.KindReader
    @overload
    def init(self, name: Literal["senderPeerInfo"]) -> PeerInfo: ...
    @overload
    def init(self, name: Literal["kind"]) -> Kind: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> Iterator[OperationReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes, traversal_limit_in_words: int | None = ..., nesting_limit: int | None = ...
    ) -> OperationReader: ...
    @staticmethod
    def new_message() -> OperationBuilder: ...
    def to_dict(self) -> dict: ...

class OperationReader(Operation):
    senderPeerInfo: PeerInfoReader
    kind: Operation.KindReader
    def as_builder(self) -> OperationBuilder: ...

class OperationBuilder(Operation):
    senderPeerInfo: PeerInfo | PeerInfoBuilder | PeerInfoReader
    kind: Operation.Kind | Operation.KindBuilder | Operation.KindReader
    @staticmethod
    def from_dict(dictionary: dict) -> OperationBuilder: ...
    def copy(self) -> OperationBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> OperationReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
